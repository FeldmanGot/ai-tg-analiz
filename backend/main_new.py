#!/usr/bin/env python3
"""
–ù–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±—ç–∫–µ–Ω–¥–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞ Telegram
"""

import os
import json
import asyncio
from datetime import datetime
from typing import List, Dict, Optional
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞
from telegram_analyzer import TelegramAnalyzer

app = FastAPI(title="Telegram Analyzer API", version="2.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_analyzer = None
active_chats = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TelegramAuthRequest(BaseModel):
    api_id: int
    api_hash: str
    phone: str

class TelegramCodeRequest(BaseModel):
    code: str
    password: Optional[str] = None

class ChatRequest(BaseModel):
    chat: str
    limit: int = 3000

class AnalysisRequest(BaseModel):
    chat: str
    messages_count: int = 30

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Analyzer API v2.0")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Telegram Analyzer API v2.0",
        "status": "running",
        "endpoints": {
            "/telegram/connect": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞",
            "/telegram/verify": "–í–≤–æ–¥ –∫–æ–¥–∞ –∏ –ø–∞—Ä–æ–ª—è",
            "/telegram/download": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞",
            "/telegram/listen": "–°–ª—É—à–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            "/telegram/profile": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–∞—Ç–∞",
            "/telegram/analysis": "–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"
        }
    }

@app.post("/telegram/connect")
async def telegram_connect(data: TelegramAuthRequest):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞"""
    global telegram_analyzer
    
    try:
        telegram_analyzer = TelegramAnalyzer(
            api_id=data.api_id,
            api_hash=data.api_hash,
            phone=data.phone
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if not await telegram_analyzer.connect():
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if await telegram_analyzer.check_auth():
            return {
                "status": "already_authorized",
                "message": "–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        if await telegram_analyzer.send_code():
            return {
                "status": "code_sent",
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"
            }
        else:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞")
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/telegram/verify")
async def telegram_verify(data: TelegramCodeRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ø–∞—Ä–æ–ª—è"""
    global telegram_analyzer
    
    if not telegram_analyzer:
        raise HTTPException(status_code=400, detail="–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    
    try:
        result = await telegram_analyzer.sign_in(data.code, data.password)
        
        if result["status"] == "success":
            return {
                "status": "success",
                "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
            }
        elif result["status"] == "2fa_required":
            return {
                "status": "2fa_required",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            }
        else:
            raise HTTPException(status_code=400, detail=result.get("message", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/telegram/download")
async def download_chat_history(data: ChatRequest):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    global telegram_analyzer
    
    if not telegram_analyzer:
        raise HTTPException(status_code=400, detail="–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    
    try:
        success = await telegram_analyzer.download_history(data.chat, data.limit)
        
        if success:
            return {
                "status": "success",
                "message": f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {data.chat} —Å–∫–∞—á–∞–Ω–∞",
                "chat": data.chat,
                "limit": data.limit
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.post("/telegram/listen")
async def start_listening(data: ChatRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global telegram_analyzer, active_chats
    
    if not telegram_analyzer:
        raise HTTPException(status_code=400, detail="–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats[data.chat] = {
            "started_at": datetime.now().isoformat(),
            "status": "listening"
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(telegram_analyzer.listen_to_new_messages, data.chat)
        
        return {
            "status": "success",
            "message": f"–°–ª—É—à–∞–Ω–∏–µ —á–∞—Ç–∞ {data.chat} –∑–∞–ø—É—â–µ–Ω–æ",
            "chat": data.chat
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/telegram/profile/{chat}")
async def get_chat_profile(chat: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —á–∞—Ç–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —á–∞—Ç–∞
        if chat.startswith('@'):
            chat_key = chat
        else:
            chat_key = f"chat_{chat}"
        
        profile_file = f"data/profiles/{chat_key}_profile.json"
        analysis_file = f"data/profiles/{chat_key}_last_analysis.txt"
        
        profile = {}
        analysis = ""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if os.path.exists(profile_file):
            with open(profile_file, 'r', encoding='utf-8') as f:
                profile = json.load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        if os.path.exists(analysis_file):
            with open(analysis_file, 'r', encoding='utf-8') as f:
                analysis = f.read()
        
        return {
            "status": "success",
            "chat": chat,
            "profile": profile,
            "last_analysis": analysis
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/telegram/messages/{chat}")
async def get_chat_messages(chat: str, limit: int = 50):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —á–∞—Ç–∞
        if chat.startswith('@'):
            chat_key = chat
        else:
            chat_key = f"chat_{chat}"
        
        live_file = f"data/live/{chat_key}.json"
        
        if os.path.exists(live_file):
            with open(live_file, 'r', encoding='utf-8') as f:
                messages = json.load(f)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            recent_messages = messages[-limit:] if len(messages) > limit else messages
            
            return {
                "status": "success",
                "chat": chat,
                "total_messages": len(messages),
                "recent_messages": recent_messages
            }
        else:
            return {
                "status": "not_found",
                "message": f"–§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è {chat} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/telegram/active")
async def get_active_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    return {
        "status": "success",
        "active_chats": active_chats
    }

@app.delete("/telegram/stop/{chat}")
async def stop_listening(chat: str):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—à–∞–Ω–∏–µ —á–∞—Ç–∞"""
    global active_chats
    
    if chat in active_chats:
        del active_chats[chat]
        return {
            "status": "success",
            "message": f"–°–ª—É—à–∞–Ω–∏–µ —á–∞—Ç–∞ {chat} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }
    else:
        return {
            "status": "not_found",
            "message": f"–ß–∞—Ç {chat} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
        }

@app.get("/telegram/files")
async def list_files():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    try:
        files = {
            "live": [],
            "profiles": [],
            "media": []
        }
        
        # –°–ø–∏—Å–æ–∫ live —Ñ–∞–π–ª–æ–≤
        if os.path.exists("data/live"):
            for file in os.listdir("data/live"):
                if file.endswith('.json'):
                    files["live"].append(file)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if os.path.exists("data/profiles"):
            for file in os.listdir("data/profiles"):
                if file.endswith('.json'):
                    files["profiles"].append(file)
        
        # –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        if os.path.exists("data/media"):
            for file in os.listdir("data/media"):
                files["media"].append(file)
        
        return {
            "status": "success",
            "files": files
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001) 